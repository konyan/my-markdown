{"version":3,"sources":["containers/editor/Editor.js","my-const.js","containers/preview/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","onChange","e","_this","onPreviewProcess","textEditor","innerHTML","sanitizeHTMLString","value","replace","this","focus","text","props","OnPreview","_this2","react_default","a","createElement","className","contentEditable","onInput","ref","editor","Component","Preview","marked","Renderer","link","href","title","concat","dangerouslySetInnerHTML","__html","renderer","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onPreview","setState","placeholder","state","id","Editor_Editor","Preview_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAKqBA,0NASjBC,SAAW,SAACC,GACRC,EAAKC,iBAAiBD,EAAKE,WAAWC,cAc1CC,mBAAqB,SAACC,GAQlB,OAPWA,EACNC,QAAQ,SAAU,MAClBA,QAAQ,WAAY,IACpBA,QAAQ,QAAS,MACjBA,QAAQ,0CAA2C,MACnDA,QAAQ,QAAS,KAAKA,QAAQ,QAAS,KACvCA,QAAQ,UAAW,yFA5BxBC,KAAKL,WAAWM,QAChBD,KAAKL,WAAWC,UCuCpB,2uDDtCII,KAAKN,iBAAiBM,KAAKL,WAAWC,oDAQzBA,GACb,IAAIM,EAAOF,KAAKH,mBAAmBD,GACnCI,KAAKG,MAAMC,UAAUF,oCAEhB,IAAAG,EAAAL,KACL,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBC,iBAAe,EAACC,QAASX,KAAKT,SAAUqB,IAAK,SAACC,GAAaR,EAAKV,WAAakB,YAnB3FC,8BEAfC,sMAEE,IAAIC,IAAOC,UACjBC,KAAO,SAAUC,EAAMC,EAAOlB,GACnC,kCAAAmB,OAAmCF,EAAnC,MAAAE,OAA4CnB,EAA5C,4CAGC,IACGA,EAASF,KAAKG,MAAdD,KACR,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUa,wBAAyB,CAAEC,OAAQP,IAAOd,EAAM,CAAEsB,SAAUxB,KAAKwB,qBAVjEV,cCmCtBW,cAjCb,SAAAA,EAAYtB,GAAO,IAAAV,EAAA,OAAAiC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAyB,IACjBhC,EAAAiC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA9B,KAAMG,KAMR4B,UAAY,SAAA7B,GACVT,EAAKuC,SAAS,CACZC,YAAa/B,KAPfT,EAAKyC,MAAQ,CACXD,YAAa,IAHExC,wEAaV,IACCwC,EAAgBjC,KAAKkC,MAArBD,YACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,kBAGAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,SAAS1B,UAAU,QACzBH,EAAAC,EAAAC,cAAC4B,EAAD,CAAQhC,UAAWJ,KAAK+B,aAE1BzB,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,UAAU1B,UAAU,QAC1BH,EAAAC,EAAAC,cAAC6B,EAAD,CAASnC,KAAM+B,cA3BTnB,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c604f87b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Editor.css';\nimport PropTypes from 'prop-types';\nimport { placeholder, test } from '../../my-const';\n\nexport default class Editor extends Component {\n\n    componentDidMount() {\n        this.textEditor.focus();\n        this.textEditor.innerHTML = test;\n        this.onPreviewProcess(this.textEditor.innerHTML)\n\n    }\n\n    onChange = (e) => {\n        this.onPreviewProcess(this.textEditor.innerHTML)\n    }\n\n    onPreviewProcess(innerHTML) {\n        let text = this.sanitizeHTMLString(innerHTML);\n        this.props.OnPreview(text);\n    }\n    render() {\n        return (\n            <div className=\"markdown-body editor\" contentEditable onInput={this.onChange} ref={(editor) => { this.textEditor = editor }}>\n            </div>\n        )\n    }\n\n    sanitizeHTMLString = (value) => {\n        let text = value\n            .replace(/<div>/g, '\\n')\n            .replace(/<\\/div>/g, '')\n            .replace(/<br>/g, '\\n')\n            .replace(/<br class=\"Apple-interchange-newline\">/g, '\\n')\n            .replace(/&lt;/g, '<').replace(/&gt;/g, '>')\n            .replace(/&nbsp;/g, ' ')\n        return text;\n\n        // value = value.replace(/&lt;/g, '<')\n        // value = value.replace(/<br class=\"Apple-interchange-newline\">/g, '\\n')\n        // // value = value.replace(/&nbsp;/g, '-');\n\n        // // value = value.replace(/&gt;/g, '>')\n\n        // // Convert `&amp;` to `&`.\n        // value = value.replace(/&amp;/gi, '&');\n\n        // // Replace spaces.\n        // value = value.replace(/&nbsp;/gi, '\\b');\n        // // value = value.replace(/\\s+/g, '\\b');\n\n        // // Remove \"<b>\".\n        // value = value.replace(/<b>/gi, '');\n        // value = value.replace(/<\\/b>/gi, '');\n\n        // // Remove \"<strong>\".\n        // value = value.replace(/<strong>/gi, '');\n        // value = value.replace(/<\\/strong>/gi, '');\n\n        // // Remove \"<i>\".\n        // value = value.replace(/<i>/gi, '');\n        // value = value.replace(/<\\/i>/gi, '');\n\n        // // Remove \"<em>\".\n        // value = value.replace(/<em>/gi, '');\n        // value = value.replace(/<\\/em>/gi, '');\n\n        // // Remove \"<u>\".\n        // value = value.replace(/<u>/gi, '');\n        // value = value.replace(/<\\/u>/gi, '');\n\n        // // Tighten up \"<\" and \">\".\n        // value = value.replace(/>\\s+/g, '>');\n        // value = value.replace(/\\s+</g, '<');\n\n        // // Replace \"<br>\".\n        // value = value.replace(/<br>/gi, '\\n');\n\n        // // Replace \"<div>\" (from Chrome).\n        // value = value.replace(/<div>/gi, '\\n');\n        // value = value.replace(/<\\/div>/gi, '');\n\n        // // Replace \"<p>\" (from IE).\n        // value = value.replace(/<p>/gi, '\\n');\n        // value = value.replace(/<\\/p>/gi, '');\n\n        // // No more than 2x newline, per \"paragraph\".\n        // value = value.replace(/\\n\\n+/g, '\\n\\n');\n\n        // // Whitespace before/after.\n        // value = value.trim();\n\n        // return value;\n    }\n}\n\nEditor.propTypes = {\n    OnPreview: PropTypes.func.isRequired\n}","export const placeholder = `# Welcome to my React Markdown Previewer! \n\n    ## This is a sub-heading...\n    ### And here's some other cool stuff:\n      \n    Heres some code, \\`<div></div>\\`, between 2 backticks.\n    \n    \\`\\`\\`\n    // this is multi-line code:\n    \n    function anotherExample(firstLine, lastLine) {\n      if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n        return multiLineCode;\n      }\n    }\n    \\`\\`\\`\n      \n    You can also make text **bold**... whoa!\n    Or _italic_.\n    Or... wait for it... **_both!_**\n    And feel free to go crazy ~~crossing stuff out~~.\n    \n    There's also [links](https://www.freecodecamp.com), and\n    > Block Quotes!\n    \n    And if you want to get really crazy, even tables:\n    \n    Wild Header | Crazy Header | Another Header?\n    ------------ | ------------- | ------------- \n    Your content can | be here, and it | can be here....\n    And here. | Okay. | I think we get it.\n    \n    - And of course there are lists.\n      - Some are bulleted.\n         - With different indentation levels.\n            - That look like this.\n    \n    \n    1. And there are numbererd lists too.\n    1. Use just 1s if you want! \n    1. But the list goes on...\n    - Even if you use dashes or asterisks.\n    * And last but not least, let's not forget embedded images:\n    \n    ![React Logo w/ Text](https://goo.gl/Umyytc)\n    `\n\n    export const test = \n    \"<div># Welcome to my React Markdown Previewer!</div><div><br></div><div>## This is a sub-heading...</div><div>### And here's some other cool stuff:</div><div>&nbsp;&nbsp;</div><div>Heres some code, `&lt;div&gt;&lt;/div&gt;`, between 2 backticks.</div><div><br></div><div>```</div><div>// this is multi-line code:</div><div><br></div><div>function anotherExample(firstLine, lastLine) {</div><div>&nbsp; if (firstLine == '```' &amp;&amp; lastLine == '```') {</div><div>&nbsp; &nbsp; return multiLineCode;</div><div>&nbsp; }</div><div>}</div><div>```</div><div>&nbsp;&nbsp;</div><div>You can also make text **bold**... whoa!</div><div>Or _italic_.</div><div>Or... wait for it... **_both!_**</div><div>And feel free to go crazy ~~crossing stuff out~~.</div><div><br></div><div>There's also [links](https://www.freecodecamp.com), and</div><div>&gt; Block Quotes!</div><div><br></div><div>And if you want to get really crazy, even tables:</div><div><br></div><div>Wild Header | Crazy Header | Another Header?</div><div>------------ | ------------- | -------------&nbsp;</div><div>Your content can | be here, and it | can be here....</div><div>And here. | Okay. | I think we get it.</div><div><br></div><div>- And of course there are lists.</div><div>&nbsp; - Some are bulleted.</div><div>&nbsp; &nbsp; &nbsp;- With different indentation levels.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - That look like this.</div><div><br></div><div><br></div><div>1. And there are numbererd lists too.</div><div>1. Use just 1s if you want!&nbsp;</div><div>1. But the list goes on...</div><div>- Even if you use dashes or asterisks.</div><div>* And last but not least, let's not forget embedded images:</div><div><br></div><div>![React Logo w/ Text](https://goo.gl/Umyytc)</div><div><br></div>\"\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport marked from 'marked';\nimport './Preview.css';\n\nexport default class Preview extends Component {\n    componentDidMount() {\n        let renderer = new marked.Renderer();\n        renderer.link = function (href, title, text) {\n            return `<a target=\"_blank\" href=\"${href}\">${text}'</a>'`;\n        }\n    }\n    render() {\n        const { text } = this.props;\n        return (\n            <div className='preview' dangerouslySetInnerHTML={{ __html: marked(text, { renderer: this.renderer }) }} />\n        )\n    }\n\n\n}\n\n\nPreview.propTypes = {\n    text: PropTypes.string.isRequired\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Editor from './containers/editor/Editor';\nimport Preview from './containers/preview/Preview';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      placeholder: ''\n    }\n  }\n\n  onPreview = text => {\n    this.setState({\n      placeholder: text\n    })\n  }\n\n  render() {\n    const { placeholder } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        Hello MarkDown\n        </header>\n        <main className=\"container\">\n          <div id=\"editor\" className=\"item\">\n            <Editor OnPreview={this.onPreview} />\n          </div>\n          <div id=\"preview\" className=\"item\">\n            <Preview text={placeholder} />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}